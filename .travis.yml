os: linux
dist: xenial

cache:
  apt: true
  directories:
    # Cache directory for older Composer versions.
    - $HOME/.composer/cache/files
    # Cache directory for more recent Composer versions.
    - $HOME/.cache/composer/files

language: php

php:
  - 5.6
  - 7.0
  - 7.1
  - 7.3
  - 7.4
  - "nightly"

env:
  # Highest supported PHPCS + WPCS versions.
  - PHPCS_BRANCH="dev-master" WPCS_BRANCH="dev-master" LINT=1
  # Lowest supported PHPCS + WPCS versions.
  - PHPCS_BRANCH="3.3.1" WPCS_BRANCH="2.2.0"

stages:
  - sniff
  - test

jobs:
  fast_finish: true
  include:
    - stage: sniff
      php: 7.3
      env: PHPCS_BRANCH="dev-master" WPCS_BRANCH="dev-master"
      addons:
        apt:
          packages:
            - libxml2-utils
      script:
        # Check the codestyle of the WPThemeReview codebase.
        - $(pwd)/vendor/bin/phpcs

        # Validate the xml files.
        # @link http://xmlsoft.org/xmllint.html
        - xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./*/ruleset.xml

        # Check the code-style consistency of the xml files.
        - diff -B --tabsize=4 ./WPThemeReview/ruleset.xml <(xmllint --format "./WPThemeReview/ruleset.xml")

        # Check that the sniffs available are feature complete.
        # For now, just check that all sniffs have unit tests.
        # At a later stage the documentation check can be activated.
        - composer check-complete

    # Seperate test builds for PHP 7.2 with reversed PHPCS vs WPCS branches.
    - stage: test
      php: 7.2
      env: PHPCS_BRANCH="dev-master" WPCS_BRANCH="2.2.0" LINT=1
    - php: 7.2
      env: PHPCS_BRANCH="3.3.1" WPCS_BRANCH="dev-master"
    - php: 7.4
      env: PHPCS_BRANCH="dev-master" WPCS_BRANCH="dev-develop"

    # Builds which need a different distribution.
    - php: 5.5
      dist: trusty
      env: PHPCS_BRANCH="dev-master" WPCS_BRANCH="2.2.0" LINT=1
    - php: 5.4
      dist: trusty
      env: PHPCS_BRANCH="dev-master" WPCS_BRANCH="2.2.0" LINT=1


  allow_failures:
    # Allow failures for unstable builds.
    - php: "nightly"
    - env: PHPCS_BRANCH="dev-master" WPCS_BRANCH="dev-develop"

before_install:
  # Speed up build time by disabling Xdebug.
  - phpenv config-rm xdebug.ini || echo 'No xdebug config.'

  # On stable PHPCS versions, allow for PHP deprecation notices.
  # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" != "Sniff" && $PHPCS_BRANCH != "dev-master" && $WPCS_BRANCH != "dev-develop" ]]; then
      echo 'error_reporting = E_ALL & ~E_DEPRECATED' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
    fi

  - export XMLLINT_INDENT="	"

install:
  - if [[ ${WPCS_BRANCH} == "dev-develop" ]]; then travis_retry composer config minimum-stability dev; fi
  - composer require squizlabs/php_codesniffer:${PHPCS_BRANCH} wp-coding-standards/wpcs:${WPCS_BRANCH} --no-update --no-suggest --no-scripts
  - travis_retry composer install --no-suggest

script:
  # Lint the PHP files against parse errors.
  - if [[ "$LINT" == "1" ]]; then if find . -path ./vendor -prune -o -name "*.php" -exec php -l {} \; | grep "^[Parse error|Fatal error]"; then exit 1; fi; fi

  # Validate the composer.json file.
  # @link https://getcomposer.org/doc/03-cli.md#validate
  - if [[ "$LINT" == "1" ]]; then composer validate --no-check-all --strict; fi

  # Run the unit tests.
  - composer run-tests
